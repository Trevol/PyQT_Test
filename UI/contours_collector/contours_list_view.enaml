from enaml.widgets.api import Container, ScrollArea, CheckBox, Label, Splitter, SplitItem
from enaml.core.api import Looper
from enamlx.widgets.api import (TableView, TableViewRow, TableViewItem)
from contours_list import ContoursList


enamldef ContoursSelector(TableView): table:
    visible_rows = 100
    selection_behavior = 'rows'
    horizontal_headers = ['Length', 'Area', 'Centroid', 'Ellipse (Area, Center, AspectRatio)', 'ArcLen']

    attr contoursList

    Looper:
        iterable << range(table.visible_rows)
        TableViewRow:
            row << table.visible_row+loop_index
            attr current_item << table.items[self.row]

            TableViewItem:
                text << str(current_item.measurements().contour_len)
                checkable = True
                checked << current_item in contoursList.selected_items
                toggled :: contoursList.toggle_item(current_item, toggled = change['value'])
            TableViewItem:
                text << str(current_item.measurements().area)
            TableViewItem:
                text << str(current_item.measurements().centroid)
            TableViewItem:
                def get_text(current_item):
                    ellipse = current_item.measurements().fitted_ellipse
                    return '{a:.1f} ({cx:.1f} {cy:.1f}) {ar:.2f}'.format(a = ellipse.area, cx = ellipse.center[0], cy = ellipse.center[1], ar = ellipse.aspect_ratio)
                text << get_text(current_item)
            TableViewItem:
                text << str(current_item.measurements().arc_len)



enamldef ContoursListView(Container): this:
    padding = 5
    attr contoursList: ContoursList

    def check_all_text(items, selected_items):
        return 'Check/uncheck all ({selected}/{all})'.format(all = len(items), selected=len(selected_items))
    Splitter:
        orientation='vertical'
        SplitItem:
            stretch = 0
            Container:
                padding=0
                CheckBox:
                    text << check_all_text(contoursList.items, contoursList.selected_items)
                    checked << len(contoursList.items) == len(contoursList.selected_items)
                    toggled :: contoursList.toggle_all(toggled = change['value'])
                ContoursSelector:
                    contoursList << this.contoursList
                    items << contoursList.selected_items
        SplitItem:
            Container:
                padding=0
                ContoursSelector:
                    contoursList << this.contoursList
                    items << this.contoursList.items