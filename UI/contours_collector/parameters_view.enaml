from enaml.widgets.api import Window, Container, PushButton, Label, Slider, SpinBox, DualSlider, SpinBox, ObjectCombo, Separator
from enaml.core.api import Looper
from enaml.layout.api import hbox, vbox, align, spacer
from atom.api import ContainerList
from contours_collector import blur_kernel_size_options

enamldef ParametersView(Container): m:

    attr contoursCollector

    constraints=[
        vbox(
            hbox(lbl_AreaFilter, spin_AreaFilterLo, spin_AreaFilterHi),
            slider_AreaFilter,
            sep_1,
            hbox(lbl_CannyThr, spin_CannyThr_1, spin_CannyThr_2),
            slider_CannyThr,
            sep_2,
            hbox(btn_Contours, btn_ContoursAuto, spacer),
            hbox(blurKernel, base_image_combo, spacer)
        )
    ]

    Label: lbl_AreaFilter:
        text = 'By Area:'
    SpinBox: spin_AreaFilterLo:
        value := contoursCollector.area_filter_lo
        minimum = -1
        maximum = 40000
    SpinBox: spin_AreaFilterHi:
        value := contoursCollector.area_filter_hi
        minimum = -1
        maximum = 40000
    DualSlider: slider_AreaFilter:
        low_value := contoursCollector.area_filter_lo
        high_value := contoursCollector.area_filter_hi
        minimum = -1
        maximum = 40000
        tick_interval = 1000

    Separator: sep_1: pass

    Label: lbl_CannyThr:
        text = 'Canny Thresholds:'
    SpinBox: spin_CannyThr_1:
        value := contoursCollector.canny_thr_1
        minimum = 0
        maximum = 255
    SpinBox: spin_CannyThr_2:
        value := contoursCollector.canny_thr_2
        minimum = 0
        maximum = 255
    DualSlider: slider_CannyThr:
        low_value := contoursCollector.canny_thr_1
        high_value := contoursCollector.canny_thr_2
        minimum = 0
        maximum = 255

    Separator: sep_2: pass

    PushButton: btn_Contours:
        text = 'Get Contours'
        clicked :: contoursCollector.make_contours()
    PushButton: btn_ContoursAuto:
        text = 'Get Contours (Auto Canny)'
        clicked :: pass #contoursCollector.make_contours(autoCannyThresholds = True)

    ObjectCombo: blurKernel:
        selected := contoursCollector.blur_kernel_size
        items = blur_kernel_size_options
    ObjectCombo: base_image_combo:
        selected := contoursCollector.base_image_kind
        items = list(getattr(type(contoursCollector), 'base_image_kind').items)